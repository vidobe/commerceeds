{"version":3,"file":"initializer.js","sources":["../../src/lib/config.ts","../../src/lib/initializer.ts"],"sourcesContent":["export class Config<T> {\n  private config: T;\n\n  constructor(initialConfig: T) {\n    this.config = initialConfig;\n  }\n\n  getConfig(): T {\n    return this.config;\n  }\n\n  setConfig(newConfig: T): void {\n    this.config = newConfig;\n  }\n}\n","import { Config, setImageParamsKeyMap } from '@adobe/elsie/lib';\n\ntype Listener = { off(): void };\n\ntype Listeners<T> = (config?: T) => Array<Listener | undefined>;\n\ntype Init<T> = (config?: T) => Promise<void>;\n\ntype Options<T> = { init: Init<T>; listeners: Listeners<T> };\n\n/**\n * The `Initializer` class is responsible for setting up event listeners and initializing a module with the given configuration.\n *\n * @template T - The type of the configuration object.\n * @class\n */\nexport class Initializer<T> {\n  private _listeners: Listener[] = [];\n  listeners: Listeners<T>;\n  init: Init<T>;\n  config = new Config<T>({} as any);\n\n  /**\n   * Creates an instance of Initializer.\n   * @param options - The initialization options.\n   * @param options.init - A function that initializes the module.\n   * @param options.listeners - A function that sets up event listeners.\n   */\n  constructor({ init, listeners }: Options<T>) {\n    this.listeners = (config) => {\n      // Unbind existing listeners\n      this._listeners.forEach((listener) => listener.off());\n      // Bind new listeners\n      return (this._listeners = listeners(config) as Listener[]);\n    };\n\n    this.init = (options) => {\n      const { imageParamsKeyMap, ...rest } = options as any;\n      this.config.setConfig({ ...this.config.getConfig(), ...rest });\n      setImageParamsKeyMap(imageParamsKeyMap);\n      return init(options);\n    };\n  }\n}\n\ntype Initializers = [Initializer<any>, { [key: string]: any } | undefined][];\n\n/**\n * The Initializers class provides methods to register, mount, and configure initializers.\n *\n * @class\n *\n * @method register - Registers a new initializer. If the initializers have already been mounted, it immediately binds the event listeners and initializes the API for the new initializer.\n * @method mount - Mounts all registered initializers. This involves binding the event listeners and initializing the APIs for each initializer, in that order.\n * @method setImageParamKeys - Sets the image parameter keys. These keys are used when initializing the APIs for the initializers.\n */\nexport class initializers {\n  static _initializers: Initializers = [];\n  static _mounted: boolean = false;\n  static _imageParamsKeyMap: { [key: string]: string } | undefined = undefined;\n\n  /**\n   * Registers a new initializer. If the initializers have already been mounted,it immediately binds the event listeners and initializes the API for the new initializer.\n   * @param initializer - The initializer to register.\n   * @param options - Optional configuration for the initializer.\n   */\n  static register(\n    initializer: Initializer<any>,\n    options?: { [key: string]: any }\n  ) {\n    if (initializers._mounted) {\n      initializer.listeners?.(options);\n      initializer.init?.(options);\n    }\n    initializers._initializers.push([initializer, options]);\n  }\n  /**\n   * Mounts all registered initializers. This involves binding the event listeners and initializing the APIs for each initializer, in that order.\n   */\n  static mount() {\n    initializers._mounted = true;\n    // In this specific order\n    // 1. Bind events\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.listeners?.(options);\n    });\n\n    // 2. Initialize APIs\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.init?.({\n        imageParamsKeyMap: initializers._imageParamsKeyMap,\n        ...options,\n      });\n    });\n  }\n  /**\n   * Sets the image parameter keys. These keys are used when initializing the APIs for the initializers.\n   * @param params - The image parameter keys.\n   */\n  static setImageParamKeys(params: { [key: string]: any }) {\n    initializers._imageParamsKeyMap = params;\n  }\n}\n"],"names":["Config","constructor","initialConfig","config","getConfig","setConfig","newConfig","Initializer","init","listeners","_listeners","forEach","listener","off","options","imageParamsKeyMap","rest","setImageParamsKeyMap","initializers","register","initializer","_mounted","_initializers","push","mount","_imageParamsKeyMap","setImageParamKeys","params","__publicField"],"mappings":"qNAAO,MAAMA,CAAU,CAGrBC,YAAYC,EAAkB,CAFtBC,EAAAA,eAGN,KAAKA,OAASD,CAChB,CAEAE,WAAe,CACb,OAAO,KAAKD,MACd,CAEAE,UAAUC,EAAoB,CAC5B,KAAKH,OAASG,CAChB,CACF,CCEO,MAAMC,CAAe,CAY1BN,YAAY,CAAEO,KAAAA,EAAMC,UAAAA,CAAAA,EAAyB,CAXrCC,EAAAA,kBAAyB,CAAA,GACjCD,EAAAA,kBACAD,EAAAA,aACAL,EAAAA,cAAS,IAAIH,EAAU,CAAA,CAAU,GAS/B,KAAKS,UAAwBN,IAE3B,KAAKO,WAAWC,QAAsBC,GAAAA,EAASC,KAAK,EAE5C,KAAKH,WAAaD,EAAUN,CAAM,GAG5C,KAAKK,KAAoBM,GAAA,CACjB,KAAA,CAAEC,kBAAAA,EAAmB,GAAGC,CAASF,EAAAA,EACvC,YAAKX,OAAOE,UAAU,CAAE,GAAG,KAAKF,OAAOC,UAAU,EAAG,GAAGY,CAAAA,CAAM,EAC7DC,EAAqBF,CAAiB,EAC/BP,EAAKM,CAAO,CAAA,CAEvB,CACF,CAaO,MAAMI,EAAN,MAAMA,CAAa,CAUxB,OAAOC,SACLC,EACAN,EACA,SACII,EAAaG,YACfD,EAAAA,EAAYX,YAAZW,MAAAA,EAAAA,KAAAA,EAAwBN,IACxBM,EAAAA,EAAYZ,OAAZY,MAAAA,EAAAA,KAAAA,EAAmBN,IAErBI,EAAaI,cAAcC,KAAK,CAACH,EAAaN,CAAO,CAAC,CACxD,CAIA,OAAOU,OAAQ,SACbN,EAAaG,SAAW,IAGxBH,EAAAA,EAAaI,gBAAbJ,MAAAA,EAA4BP,QAAQ,CAAC,CAACS,EAAaN,CAAO,IAAM,QAC9DM,EAAAA,EAAYX,YAAZW,MAAAA,EAAAA,KAAAA,EAAwBN,EAAO,IAIjCI,EAAAA,EAAaI,gBAAbJ,MAAAA,EAA4BP,QAAQ,CAAC,CAACS,EAAaN,CAAO,IAAM,QAC9DM,EAAAA,EAAYZ,OAAZY,MAAAA,EAAAA,KAAAA,EAAmB,CACjBL,kBAAmBG,EAAaO,mBAChC,GAAGX,CAAAA,EACJ,EAEL,CAKA,OAAOY,kBAAkBC,EAAgC,CACvDT,EAAaO,mBAAqBE,CACpC,CACF,EA7CEC,EADWV,EACJI,gBAA8B,CAAA,GACrCM,EAFWV,EAEJG,WAAoB,IAC3BO,EAHWV,EAGJO,sBAHF,IAAMP,EAANI"}